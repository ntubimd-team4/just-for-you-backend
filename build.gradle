plugins {
    id 'org.springframework.boot' version '2.6.8'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
}

group = 'tw.edu.ntub.imd'
version = '1.0.2'
sourceCompatibility = '11'
targetCompatibility = '11'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

processResources {
    exclude('application-local.yml')
    exclude('application-local-example.yml')
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperty 'file.encoding', 'UTF-8'
}

subprojects {
    group = project.group
    version = project.version
    sourceCompatibility = '11'
    targetCompatibility = '11'

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'

    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Test) {
        systemProperty 'file.encoding', 'UTF-8'
    }

    repositories {
        mavenCentral()
        maven {
            url 'http://211.75.1.199:8081/repository/maven-releases/'
            credentials {
                username "downloader"
                password "c.42j0 zj4yk6bp6"
            }
            allowInsecureProtocol = true
        }
    }

    configurations {
        providedRuntime
        implementation.exclude module: 'spring-boot-starter-logging'
    }

    dependencyManagement {
        imports {
            mavenBom('org.springframework.boot:spring-boot-dependencies:2.6.8')
        }
    }

    test {
        useJUnitPlatform()
    }
}

configurations {
    providedRuntime
    implementation.exclude module: 'spring-boot-starter-logging'
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url 'http://211.75.1.199:8081/repository/maven-releases/'
        credentials {
            username "downloader"
            password "c.42j0 zj4yk6bp6"
        }
        allowInsecureProtocol = true
    }
}

allprojects {
    repositories {
        maven { url 'https://jitpack.io' }
    }
}

dependencies {
    implementation project('modules:just-for-you-config')
    implementation project('modules:just-for-you-database-config')
    implementation 'tw.edu.ntub.birc:common:1.1.0'
    implementation 'org.yaml:snakeyaml:1.26'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'commons-fileupload:commons-fileupload:1.3.3'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.0'
    implementation 'org.apache.commons:commons-text:1.8'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
    implementation 'com.google.api-client:google-api-client:2.0.0'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'
    implementation 'io.springfox:springfox-swagger2:3.0.0'
    implementation group: 'com.theokanning.openai-gpt3-java', name: 'api', version: '0.15.0'
    implementation group: 'com.theokanning.openai-gpt3-java', name: 'service', version: '0.15.0'
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.2.3'
    implementation 'org.jasypt:jasypt:1.9.3'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

test {
    useJUnitPlatform()
}
